finished deleted try.txt
二分搜索算法实现：

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    return -1

# 示例使用
sorted_array = [1, 3, 5, 7, 9, 11, 13, 15]
target = 7
result = binary_search(sorted_array, target)

if result != -1:
    print(f"目标元素 {target} 在索引 {result} 处找到")
else:
    print(f"目标元素 {target} 未找到")

    // C++实现的二分搜索算法

    #include <iostream>
    #include <vector>

    int binary_search(const std::vector<int>& arr, int target) {
        int left = 0;
        int right = arr.size() - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return -1;
    }

    int main() {
        std::vector<int> sorted_array = {1, 3, 5, 7, 9, 11, 13, 15};
        int target = 7;
        int result = binary_search(sorted_array, target);

        if (result != -1) {
            std::cout << "目标元素 " << target << " 在索引 " << result << " 处找到" << std::endl;
        } else {
            std::cout << "目标元素 " << target << " 未找到" << std::endl;
        }

        return 0;
    }
